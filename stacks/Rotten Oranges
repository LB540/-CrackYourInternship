class Solution {
    public:
    //Function to find minimum time required to rot all oranges. 
    bool check(int i,int j,int n,int m) {
        if(i<0 || i>=n || j<0 || j>=m) 
            return false;
        return true;
    }
    
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        int time=0,fresh=0;
        
        queue<pair<int,int>>q;
        
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(grid[i][j]==2) {
                    q.push({i,j});
                }else if(grid[i][j]==1) {
                    fresh++;
                }
            }
        }
        if(fresh==0) return 0;
        
        while(!q.empty()) {
            int qsize=q.size();
            int count=0;
            while(qsize!=0) {
                int i = q.front().first;
                int j = q.front().second;
            
                q.pop();
                
                if(check(i-1,j,n,m) && grid[i-1][j]==1) {
                    grid[i-1][j]=2;
                    q.push({i-1,j});
                    count++;
                }
                if(check(i+1,j,n,m) && grid[i+1][j]==1) {
                    grid[i+1][j]=2;
                    q.push({i+1,j});
                    count++;
                }
                if(check(i,j+1,n,m) && grid[i][j+1]==1) {
                    grid[i][j+1]=2;
                    q.push({i,j+1});
                    count++;
                }
                if(check(i,j-1,n,m) && grid[i][j-1]==1) {
                    grid[i][j-1]=2;
                    q.push({i,j-1});
                    count++;
                }
                qsize--;
            }
            
            if(count!=0) time++;
        }
        
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(grid[i][j]==1) {
                    time=0;
                    break;
                }
            }
        }
        
        return (time==0)?-1:time;
    }
};
