class Solution {
    public:
      vector <int> maxOfMin(int arr[], int n)
    {
        // Your code here
        
    // 1st Approach
        // vector<int>ans;
        // for(int k=1;k<=n;k++) {
        //     int maxOfMin=INT_MIN;
        //     for(int i=0;i<=n-k;i++) {
        //         int min=arr[i];
        //         for(int j=0;j<k;j++) {
        //             if(arr[i+j]<min)
        //                 min = arr[i+j];
                    
        //         }
        //         if(min>maxOfMin) { // max of all the min
        //             maxOfMin = min;
        //         }
                
        //     }
        //     ans.push_back(maxOfMin);
        // }
        // return ans;
    // 2nd approach
        
        vector<int>left(n,-1),right(n,n);
        stack<int>s,t;
        for(int i=0;i<n;i++) {
            while(!s.empty() && arr[s.top()]>=arr[i]) {
                s.pop();
            }
            left[i] = s.empty()?-1:s.top();
            s.push(i);
        }
        
        for(int i=n-1;i>=0;i--) {
            while(!t.empty() && arr[t.top()]>=arr[i]) {
                t.pop();
            }
            right[i] = t.empty()?n:t.top();
            t.push(i);
        }
        
        vector<int>len(n,0);
        for(int i=0;i<n;i++) {
            len[right[i]-left[i]-2] = max(len[right[i]-left[i]-2],arr[i]);
        }
        for(int i=n-2;i>=0;i--) {
            len[i] = max(len[i],len[i+1]);
        }
        return len;
    }
}
